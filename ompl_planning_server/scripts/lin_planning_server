#!/usr/bin/env python
"""
Launch a LINPlanning server,
implemented using the move_group interface.

The move_group interface is not used directly,
but through the more readable Robot wrapper class
in the nexon package.
"""
import rospy

from moveit_msgs.msg import RobotTrajectory
from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse

from nexon.robot import Robot
from nexon_msgs.srv import LINPlanning, LINPlanningResponse


def handle_planning_request(req, robot):
    print("Received linear planning request")
    print(req)
    resp = LINPlanningResponse()

    if req.has_constraints:
        print("This planner does not support constraints.")
        resp.success = False
        return resp

    # set start configuration if given
    if len(req.start_config) > 0:
        state = robot.mc.get_current_state()
        state.joint_state.position = req.start_config
        robot.mg.set_start_state(state)
        p_start = robot.forward_kinematics(req.start_config)
    else:
        p_start = robot.forward_kinematics(robot.mg.get_current_joint_values())

    plan = robot.movel(p_start, req.pose_goal)

    return LINPlanningResponse(success=True, joint_path=plan.joint_trajectory.points)


if __name__ == "__main__":
    rospy.init_node('ompl_lin_planning_server')

    robot = Robot()
    serv = rospy.Service('ompl_lin_planning',
                         LINPlanning, lambda x: handle_planning_request(x, robot))
    print("Ready receive planning requests.")
    rospy.spin()
