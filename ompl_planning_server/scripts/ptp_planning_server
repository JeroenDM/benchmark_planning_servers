#!/usr/bin/env python
"""
Launch a PTPPlanning server,
implemented using the move_group interface.

The move_group interface is not used directly,
but through the more readable Robot wrapper class
in the nexon package.
"""
import rospy

from moveit_msgs.msg import RobotTrajectory
from std_srvs.srv import Trigger, TriggerRequest, TriggerResponse

from nexon.robot import Robot
from nexon_msgs.srv import PTPPlanning, PTPPlanningResponse


def handle_planning_request(req, robot):
    print("Received ptp planning request")
    print(req)

    plan = RobotTrajectory()
    robot.set_planner(req.planner)

    # set start configuration if given
    if len(req.start_config) > 0:
        state = robot.mc.get_current_state()
        state.joint_state.position = req.start_config
        robot.mg.set_start_state(state)

    # plan to joint goal if given
    if len(req.joint_goal) > 0:
        plan = robot.movej(req.joint_goal)

    # otherwise plan to pose goal
    else:
        plan = robot.movep(req.pose_goal)

    # check if the plan has joint positions in it
    if len(plan.joint_trajectory.points) > 0:
        success = True
    else:
        success = False

    if success:
        return PTPPlanningResponse(success, plan.joint_trajectory.points)
    else:
        return PTPPlanningResponse(False, [])


if __name__ == "__main__":
    rospy.init_node('ompl_ptp_planning_server')

    robot = Robot()
    serv = rospy.Service('ompl_ptp_planning', PTPPlanning,
                         lambda x: handle_planning_request(x, robot))
    print("Ready receive planning requests.")
    rospy.spin()
